import{_ as i,c as a,o as n,a9 as t}from"./chunks/framework.GQWhFI7o.js";const g=JSON.parse('{"title":"在 WebAssembly 中使用 SIMD （一）","description":"","frontmatter":{"createDate":"2025/09/08","tags":"WebAssembly, SIMD, wabt"},"headers":[],"relativePath":"技术的小记/在 WebAssembly 中使用 SIMD （一）/index.md","filePath":"技术的小记/在 WebAssembly 中使用 SIMD （一）/index.md","lastUpdated":1757851870000}'),l={name:"技术的小记/在 WebAssembly 中使用 SIMD （一）/index.md"};function e(p,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="在-webassembly-中使用-simd-一" tabindex="-1">在 WebAssembly 中使用 SIMD （一） <a class="header-anchor" href="#在-webassembly-中使用-simd-一" aria-label="Permalink to &quot;在 WebAssembly 中使用 SIMD （一）&quot;">​</a></h1><p>2025年09月08日</p><nav class="table-of-contents"><ul><li><a href="#webassembly-的-simd-概况">WebAssembly 的 SIMD 概况</a></li><li><a href="#simd-指令集">SIMD 指令集</a></li><li><a href="#使用-simd-指令">使用 SIMD 指令</a></li><li><a href="#预告">预告</a></li></ul></nav><h2 id="webassembly-的-simd-概况" tabindex="-1">WebAssembly 的 SIMD 概况 <a class="header-anchor" href="#webassembly-的-simd-概况" aria-label="Permalink to &quot;WebAssembly 的 SIMD 概况&quot;">​</a></h2><p>WebAssembly 的 SIMD 和 CPU 的 SIMD 是一个意思，都是指 <strong>Single Instruction Multiple Data</strong> (<strong>单指令多数据</strong>) 。SIMD 指令通过同时对多个数据执行相同的操作来实现并行数据处理，进而获得矢量运算能力，计算密集型应用，例如音视频处理、编解码器、图像处理，都采用 SIMD 提升性能。SIMD 的实现依赖于 CPU ，不同的硬件条件支持的 SIMD 能力不同，所以 SIMD 指令集很大，并且在不同架构之间有所不同，当然 WebAssembly SIMD 指令集也包含其中。另一方面， WebAssembly 作为一个通用型平台，其支持的 SIMD 指令集相对比较保守，目前仅限于固定长度 16 字节（128 位）的指令集。</p><p>目前主流的大部分虚拟机都支持 SIMD ：</p><ul><li>Chrome ≥ 91 (2021 年 5 月)</li><li>Firefox ≥ 89 (2021 年 6 月)</li><li>Safari ≥ 16.4 (2023 年 3 月)</li><li>Node.js ≥ 16.4 (2021 年 6 月)</li></ul><p>使用之前先看看大部分用户使用的客户端是否支持，然后考虑在项目中增加测试代码<strong>渐进增强</strong>。渐进增强的含义是，相同功能的 wasm 模块分别用非 SIMD 和 SIMD 指令编写，嗅探宿主对 SIMD 的支持情况，如果不支持则使用非 SIMD 模块，如果支持则使用 SIMD 模块。嗅探可以使用 <a href="https://github.com/GoogleChromeLabs/wasm-feature-detect" target="_blank" rel="noreferrer">wasm-feature-detect</a> 库。这个库专门用于测试宿主对 wasm 特性支持程度，除了 SIMD 以外，这个库还可以检查诸如 64 位内存、多线程等新特性和实验特性，并且支持摇树（Tree-shakable），对 web 应用友好。</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// loadWasmModule.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { simd } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;wasm-feature-detect&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">simdUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">isSupported</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isSupported </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(simdUrl) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="simd-指令集" tabindex="-1">SIMD 指令集 <a class="header-anchor" href="#simd-指令集" aria-label="Permalink to &quot;SIMD 指令集&quot;">​</a></h2><p>SIMD 指令和单字节指令类似，也是算术运算、读取写入、逻辑运算这几类。使用时需要严格按照栈式指令操作，SIMD 指令汇总：</p><table tabindex="0"><thead><tr><th style="text-align:center;">指令格式</th><th style="text-align:center;">功能描述</th><th style="text-align:center;">示例</th></tr></thead><tbody><tr><td style="text-align:center;">读取和存储</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>v128.load offset=&lt;n&gt; align=&lt;m&gt;</code></td><td style="text-align:center;">从内存加载 128 位向量</td><td style="text-align:center;"><code>(v128.load offset=0 align=16 (i32.const 0))</code></td></tr><tr><td style="text-align:center;"><code>v128.load8_splat</code></td><td style="text-align:center;">加载 8 位整数并复制 16 次填充向量</td><td style="text-align:center;"><code>(v128.load8_splat (i32.const 42))</code></td></tr><tr><td style="text-align:center;"><code>v128.load16_splat</code></td><td style="text-align:center;">加载 16 位整数并复制 8 次填充向量</td><td style="text-align:center;"><code>(v128.load16_splat (i32.const 1024))</code></td></tr><tr><td style="text-align:center;"><code>v128.load32_splat</code></td><td style="text-align:center;">加载 32 位整数并复制 4 次填充向量</td><td style="text-align:center;"><code>(v128.load32_splat (i32.const 0x12345678))</code></td></tr><tr><td style="text-align:center;"><code>v128.load64_splat</code></td><td style="text-align:center;">加载 64 位整数并复制 2 次填充向量</td><td style="text-align:center;"><code>(v128.load64_splat (i32.const 0))</code></td></tr><tr><td style="text-align:center;"><code>v128.store offset=&lt;n&gt; align=&lt;m&gt;</code></td><td style="text-align:center;">存储 128 位向量到内存</td><td style="text-align:center;"><code>(v128.store offset=16 align=16 (i32.const 32) (local.get $vec))</code></td></tr><tr><td style="text-align:center;">创建常量</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>v128.const &lt;type&gt; &lt;values&gt;</code></td><td style="text-align:center;">创建常量向量</td><td style="text-align:center;"><code>(v128.const i32x4 0 1 2 3)</code></td></tr><tr><td style="text-align:center;"><code>v128.const &lt;type&gt; &lt;values&gt;</code></td><td style="text-align:center;">创建浮点常量向量</td><td style="text-align:center;"><code>(v128.const f32x4 1.0 2.0 3.0 4.0)</code></td></tr><tr><td style="text-align:center;">整数算术运算</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>i8x16.add(a, b)</code></td><td style="text-align:center;">8 位整数加法（16 通道）</td><td style="text-align:center;"><code>(i8x16.add (local.get $a) (local.get $b))</code></td></tr><tr><td style="text-align:center;"><code>i16x8.sub(a, b)</code></td><td style="text-align:center;">16 位整数减法（8 通道）</td><td style="text-align:center;"><code>(i16x8.sub (local.get $a) (local.get $b))</code></td></tr><tr><td style="text-align:center;"><code>i32x4.mul(a, b)</code></td><td style="text-align:center;">32 位整数乘法（4 通道）</td><td style="text-align:center;"><code>(i32x4.mul (local.get $a) (local.get $b))</code></td></tr><tr><td style="text-align:center;"><code>i64x2.add(a, b)</code></td><td style="text-align:center;">64 位整数加法（2 通道）</td><td style="text-align:center;"><code>(i64x2.add (local.get $a) (local.get $b))</code></td></tr><tr><td style="text-align:center;"><code>i8x16.add_saturate_s(a, b)</code></td><td style="text-align:center;">8 位有符号饱和加法</td><td style="text-align:center;"><code>(i8x16.add_saturate_s (local.get $a) (local.get $b))</code></td></tr><tr><td style="text-align:center;"><code>i16x8.sub_saturate_u(a, b)</code></td><td style="text-align:center;">16 位无符号饱和减法</td><td style="text-align:center;"><code>(i16x8.sub_saturate_u (local.get $a) (local.get $b))</code></td></tr><tr><td style="text-align:center;">整数比较运算</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>i8x16.eq(a, b)</code></td><td style="text-align:center;">8 位整数相等比较（返回掩码）</td><td style="text-align:center;"><code>(i8x16.eq (local.get $a) (local.get $b))</code></td></tr><tr><td style="text-align:center;"><code>i32x4.lt_s(a, b)</code></td><td style="text-align:center;">32 位有符号整数小于比较</td><td style="text-align:center;"><code>(i32x4.lt_s (local.get $a) (local.get $b))</code></td></tr><tr><td style="text-align:center;"><code>i16x8.gt_u(a, b)</code></td><td style="text-align:center;">16 位无符号整数大于比较</td><td style="text-align:center;"><code>(i16x8.gt_u (local.get $a) (local.get $b))</code></td></tr><tr><td style="text-align:center;">浮点运算</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>f32x4.add(a, b)</code></td><td style="text-align:center;">32 位浮点加法（4 通道）</td><td style="text-align:center;"><code>(f32x4.add (local.get $a) (local.get $b))</code></td></tr><tr><td style="text-align:center;"><code>f64x2.mul(a, b)</code></td><td style="text-align:center;">64 位浮点乘法（2 通道）</td><td style="text-align:center;"><code>(f64x2.mul (local.get $a) (local.get $b))</code></td></tr><tr><td style="text-align:center;"><code>f32x4.min(a, b)</code></td><td style="text-align:center;">32 位浮点最小值（4 通道）</td><td style="text-align:center;"><code>(f32x4.min (local.get $a) (local.get $b))</code></td></tr><tr><td style="text-align:center;"><code>f64x2.sqrt(a)</code></td><td style="text-align:center;">64 位浮点平方根（2 通道）</td><td style="text-align:center;"><code>(f64x2.sqrt (local.get $a))</code></td></tr><tr><td style="text-align:center;">位运算</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>v128.and(a, b)</code></td><td style="text-align:center;">按位与</td><td style="text-align:center;"><code>(v128.and (local.get $a) (local.get $b))</code></td></tr><tr><td style="text-align:center;"><code>v128.or(a, b)</code></td><td style="text-align:center;">按位或</td><td style="text-align:center;"><code>(v128.or (local.get $a) (local.get $b))</code></td></tr><tr><td style="text-align:center;"><code>v128.xor(a, b)</code></td><td style="text-align:center;">按位异或</td><td style="text-align:center;"><code>(v128.xor (local.get $a) (local.get $b))</code></td></tr><tr><td style="text-align:center;"><code>v128.bitselect(a, b, mask)</code></td><td style="text-align:center;">根据掩码选择位</td><td style="text-align:center;"><code>(v128.bitselect (local.get $a) (local.get $b) (local.get $mask))</code></td></tr><tr><td style="text-align:center;">位移</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>i32x4.shl(a, imm)</code></td><td style="text-align:center;">32 位整数左移（立即数）</td><td style="text-align:center;"><code>(i32x4.shl (local.get $a) (i32.const 2))</code></td></tr><tr><td style="text-align:center;"><code>i64x2.shr_u(a, imm)</code></td><td style="text-align:center;">64 位无符号整数右移（立即数）</td><td style="text-align:center;"><code>(i64x2.shr_u (local.get $a) (i32.const 3))</code></td></tr><tr><td style="text-align:center;"><code>i16x8.shl(a, imm)</code></td><td style="text-align:center;">16 位整数左移（立即数）</td><td style="text-align:center;"><code>(i16x8.shl (local.get $a) (i32.const 4))</code></td></tr><tr><td style="text-align:center;">通道操作</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>i8x16.extract_lane_s(idx, a)</code></td><td style="text-align:center;">提取 8 位有符号整数通道</td><td style="text-align:center;"><code>(i8x16.extract_lane_s 3 (local.get $a))</code></td></tr><tr><td style="text-align:center;"><code>f64x2.replace_lane(idx, a, value)</code></td><td style="text-align:center;">替换 64 位浮点通道</td><td style="text-align:center;"><code>(f64x2.replace_lane 1 (local.get $a) (f64.const 3.14))</code></td></tr><tr><td style="text-align:center;"><code>i8x16.swizzle(a, s)</code></td><td style="text-align:center;">根据索引向量重排通道</td><td style="text-align:center;"><code>(i8x16.swizzle (local.get $a) (local.get $indices))</code></td></tr><tr><td style="text-align:center;"><code>i8x16.shuffle(mask, a, b)</code></td><td style="text-align:center;">根据掩码混洗两个向量的通道</td><td style="text-align:center;"><code>(i8x16.shuffle 0 1 2 3 12 13 14 15 8 9 10 11 4 5 6 7 (local.get $a) (local.get $b))</code></td></tr><tr><td style="text-align:center;">类型转换</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>i32x4.trunc_sat_f32x4_s(a)</code></td><td style="text-align:center;">32 位浮点转 32 位有符号整数（饱和截断）</td><td style="text-align:center;"><code>(i32x4.trunc_sat_f32x4_s (local.get $a))</code></td></tr><tr><td style="text-align:center;"><code>f64x2.convert_i32x4_s(a)</code></td><td style="text-align:center;">32 位有符号整数转 64 位浮点</td><td style="text-align:center;"><code>(f64x2.convert_i32x4_s (local.get $a))</code></td></tr><tr><td style="text-align:center;"><code>i16x8.extend_low_i8x16_s(a)</code></td><td style="text-align:center;">将低 8 个 8 位有符号整数扩展为 16 位</td><td style="text-align:center;"><code>(i16x8.extend_low_i8x16_s (local.get $a))</code></td></tr><tr><td style="text-align:center;">其他</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>v128.any_true(a)</code></td><td style="text-align:center;">检查向量中是否有任意通道非零</td><td style="text-align:center;"><code>(v128.any_true (local.get $a))</code></td></tr><tr><td style="text-align:center;"><code>i8x16.all_true(a)</code></td><td style="text-align:center;">检查所有 8 位通道是否全为非零</td><td style="text-align:center;"><code>(i8x16.all_true (local.get $a))</code></td></tr><tr><td style="text-align:center;"><code>f32x4.ceil(a)</code></td><td style="text-align:center;">32 位浮点向上取整</td><td style="text-align:center;"><code>(f32x4.ceil (local.get $a))</code></td></tr><tr><td style="text-align:center;"><code>f64x2.floor(a)</code></td><td style="text-align:center;">64 位浮点向下取整</td><td style="text-align:center;"><code>(f64x2.floor (local.get $a))</code></td></tr></tbody></table><blockquote><p>指令集使用 deepseek 协助汇总，没有严格校对，如有错误请指出。</p></blockquote><h2 id="使用-simd-指令" tabindex="-1">使用 SIMD 指令 <a class="header-anchor" href="#使用-simd-指令" aria-label="Permalink to &quot;使用 SIMD 指令&quot;">​</a></h2><p>举个例子，如果想要对一张图片进行反色处理，如果不使用 SIMD 指令集， wat 实现如下：</p><div class="language-wasm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">wasm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;env&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;log&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ;; 导入内存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;env&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;memory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">memory</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ;; 反色函数：原地转换 RGB 通道，跳过Alpha通道</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $invert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $start </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $length </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $end </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;; 结束地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;; 当前字节索引</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    ;; 计算结束地址 = start + length * 4</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $start</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.mul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $length) (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.add</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    ;; 初始化循环变量 i = start</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $start</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $exit</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      ;; 主循环（每次处理4个字节：R,G,B,A）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $loop</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        ;; 检查是否到达结束地址</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $end</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.ge_u</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        br_if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $exit</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        ;; 处理R通道（偏移0）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.load8_u</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      ;; 加载原始R值</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.sub</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          ;; 计算255 - R</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.store8</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       ;; 存储反色后的R值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        ;; 处理G通道（偏移1）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.add</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.add</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.load8_u</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      ;; 加载原始G值</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.sub</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          ;; 计算255 - G</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.store8</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       ;; 存储反色后的G值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        ;; 处理B通道（偏移2）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.add</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.add</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.load8_u</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      ;; 加载原始B值</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.sub</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          ;; 计算255 - B</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.store8</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       ;; 存储反色后的B值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        ;; 跳过Alpha通道（偏移3），无需修改</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        ;; 移动到下一个像素（i += 4）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.add</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        br</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $loop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ;; 导出函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;invert&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $invert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br></div></div><p>使用 SIMD 指令，每一步对 1 个像素点 1 个通道的操作会增强为对 4 个像素点 4 个通道的操作：</p><div class="language-wasm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">wasm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;env&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;log&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;env&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;memory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">memory</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $invert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $start </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $length </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $end </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;; 结束地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;; 当前地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $chunk </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">v128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;; 当前处理的16字节</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $mask </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">v128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;; alpha 通道掩码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $full255 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">v128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;; 全 255 掩码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    ;; end = start + length * 4</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $start</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $length</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.mul</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    ;; 数据长度可能不是 4 的倍数，这里 +3 确保数据对齐</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.add</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.add</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    ;; i = start</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $start</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    ;; 常量向量：全 255</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    v128</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i8x16 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                     255</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $full255</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    ;; 掩码：只保留 alpha 通道（第 3,7,11,15 个字节）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    v128</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i8x16 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 255</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $mask</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $exit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $loop</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        ;; if (i &gt;= end) break</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $end</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.ge_u</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        br_if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $exit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        ;; load 16 bytes (4 pixels)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        v128</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.load</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $chunk</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        ;; tmp = 255 - chunk</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $full255</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $chunk</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i8x16</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.sub</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $chunk</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        ;; 用 bitselect 保留 alpha 通道：</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        v128</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.load</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $chunk</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $mask</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        v128</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.bitselect</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $chunk</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        ;; store back</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $chunk</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        v128</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.store</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        ;; i += 16</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.add</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        br</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $loop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;invert&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $invert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br></div></div><p>注意看第 18 到第 20 行，WebAssembly SIMD 指令一次处理 16 字节数据，对应 rgba 4 个通道的图片 4 个像素，每张图片的像素点数量有可能不是 4 的倍数，所以这里加上一个大于 3 的数字即可确保所有数据都可以被处理。但是也要注意，WebAssembly 没有内存守护，这么处理会污染内存，导致其他数据错误，此例功能单一且没有其他数据，这样操作性能最好。</p><p>最后看性能对比：</p><p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/co95os03hng6cnnfqdfd.png" alt="性能对比" loading="lazy"></p><p>上图最左边是素材原图，中间是没有使用 SIMD 指令的处理结果和用时，右边是使用 SIMD 指令的处理结果和用时。素材原图的尺寸为 928*927 ，除了中间的圆形图案以外，其余都是透明像素。可以看到，使用 SIMD 指令的方案性能要比不使用的快 6 倍左右。实际上，素材越大，效果越明显，不过笔者发现在处理更小的图片的场景中，也有显著的提升，比如经典的 lenna 图：</p><p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12afnhufe7kd0zlnhv6b.png" alt="Image description" loading="lazy"></p><h2 id="预告" tabindex="-1">预告 <a class="header-anchor" href="#预告" aria-label="Permalink to &quot;预告&quot;">​</a></h2><p>下一篇将讨论，C 程序如何在 WebAssembly 中使用 SIMD 。</p>`,25)]))}const y=i(l,[["render",e]]);export{g as __pageData,y as default};
