import{_ as a,c as n,o,a8 as t}from"./chunks/framework.Cc4yYURl.js";const m=JSON.parse('{"title":"Implicit Conversion","description":"","frontmatter":{},"headers":[],"relativePath":"技术的小记/JavaScript 隐式转换/mindmap-en.md","filePath":"技术的小记/JavaScript 隐式转换/mindmap-en.md","lastUpdated":1756434761000}'),i={name:"技术的小记/JavaScript 隐式转换/mindmap-en.md"};function r(d,e,c,s,l,h){return o(),n("div",null,e[0]||(e[0]=[t('<h1 id="implicit-conversion" tabindex="-1">Implicit Conversion <a class="header-anchor" href="#implicit-conversion" aria-label="Permalink to &quot;Implicit Conversion&quot;">​</a></h1><h2 id="arithmetic-operations" tabindex="-1">Arithmetic Operations <a class="header-anchor" href="#arithmetic-operations" aria-label="Permalink to &quot;Arithmetic Operations&quot;">​</a></h2><h3 id="addition" tabindex="-1">Addition <a class="header-anchor" href="#addition" aria-label="Permalink to &quot;Addition&quot;">​</a></h3><h4 id="string-any" tabindex="-1"><code>string</code> + <code>any</code> <a class="header-anchor" href="#string-any" aria-label="Permalink to &quot;`string` + `any`&quot;">​</a></h4><h5 id="string-concatenation-non-string-types-are-converted-to-string" tabindex="-1">String concatenation, non-<code>string</code> types are converted to <code>string</code> <a class="header-anchor" href="#string-concatenation-non-string-types-are-converted-to-string" aria-label="Permalink to &quot;String concatenation, non-`string` types are converted to `string`&quot;">​</a></h5><h4 id="number-primitive-types-except-string" tabindex="-1"><code>number</code> + primitive types except <code>string</code> <a class="header-anchor" href="#number-primitive-types-except-string" aria-label="Permalink to &quot;`number` + primitive types except `string`&quot;">​</a></h4><h5 id="non-number-types-are-converted-to-number" tabindex="-1">Non-<code>number</code> types are converted to <code>number</code> <a class="header-anchor" href="#non-number-types-are-converted-to-number" aria-label="Permalink to &quot;Non-`number` types are converted to `number`&quot;">​</a></h5><h4 id="number-non-primitive" tabindex="-1"><code>number</code> + non-primitive <a class="header-anchor" href="#number-non-primitive" aria-label="Permalink to &quot;`number` + non-primitive&quot;">​</a></h4><h5 id="both-sides-are-converted-to-string" tabindex="-1">Both sides are converted to <code>string</code> <a class="header-anchor" href="#both-sides-are-converted-to-string" aria-label="Permalink to &quot;Both sides are converted to `string`&quot;">​</a></h5><h3 id="subtraction-multiplication-division" tabindex="-1">Subtraction, Multiplication, Division <a class="header-anchor" href="#subtraction-multiplication-division" aria-label="Permalink to &quot;Subtraction, Multiplication, Division&quot;">​</a></h3><h4 id="non-number-types-on-either-side-are-converted-to-number" tabindex="-1">Non-<code>number</code> types on either side are converted to <code>number</code> <a class="header-anchor" href="#non-number-types-on-either-side-are-converted-to-number" aria-label="Permalink to &quot;Non-`number` types on either side are converted to `number`&quot;">​</a></h4><h2 id="logical-operations" tabindex="-1">Logical Operations <a class="header-anchor" href="#logical-operations" aria-label="Permalink to &quot;Logical Operations&quot;">​</a></h2><h3 id="as-standalone-conditions" tabindex="-1">As standalone conditions <a class="header-anchor" href="#as-standalone-conditions" aria-label="Permalink to &quot;As standalone conditions&quot;">​</a></h3><h4 id="null-undefined-nan-±0-0n-false" tabindex="-1"><code>null</code>, <code>undefined</code>, <code>&#39;&#39;</code>, <code>NaN</code>, <code>±0</code>, <code>0n</code>, <code>false</code> <a class="header-anchor" href="#null-undefined-nan-±0-0n-false" aria-label="Permalink to &quot;`null`, `undefined`, `&#39;&#39;`, `NaN`, `±0`, `0n`, `false`&quot;">​</a></h4><h5 id="falsy-1" tabindex="-1">falsy <sup><a href="#falsy">1</a></sup> <a class="header-anchor" href="#falsy-1" aria-label="Permalink to &quot;falsy &lt;sup&gt;[1](#falsy)&lt;/sup&gt;&quot;">​</a></h5><h4 id="others" tabindex="-1">Others <a class="header-anchor" href="#others" aria-label="Permalink to &quot;Others&quot;">​</a></h4><h5 id="truthy" tabindex="-1">Truthy <a class="header-anchor" href="#truthy" aria-label="Permalink to &quot;Truthy&quot;">​</a></h5><h3 id="non-strict-comparison" tabindex="-1">Non-strict comparison <code>==</code> <a class="header-anchor" href="#non-strict-comparison" aria-label="Permalink to &quot;Non-strict comparison `==`&quot;">​</a></h3><h4 id="nan-any" tabindex="-1"><code>NaN</code> == <code>any</code> <a class="header-anchor" href="#nan-any" aria-label="Permalink to &quot;`NaN` == `any`&quot;">​</a></h4><h5 id="false-including-nan-nan" tabindex="-1">false - including <code>NaN</code> == <code>NaN</code> <a class="header-anchor" href="#false-including-nan-nan" aria-label="Permalink to &quot;false - including `NaN` == `NaN`&quot;">​</a></h5><h4 id="boolean-other" tabindex="-1"><code>boolean</code> == <code>other</code> <a class="header-anchor" href="#boolean-other" aria-label="Permalink to &quot;`boolean` == `other`&quot;">​</a></h4><h5 id="boolean-converted-to-number" tabindex="-1"><code>boolean</code> converted to <code>number</code> <a class="header-anchor" href="#boolean-converted-to-number" aria-label="Permalink to &quot;`boolean` converted to `number`&quot;">​</a></h5><h4 id="string-number" tabindex="-1"><code>string</code> == <code>number</code> <a class="header-anchor" href="#string-number" aria-label="Permalink to &quot;`string` == `number`&quot;">​</a></h4><h5 id="string-converted-to-number" tabindex="-1"><code>string</code> converted to <code>number</code> <a class="header-anchor" href="#string-converted-to-number" aria-label="Permalink to &quot;`string` converted to `number`&quot;">​</a></h5><h4 id="null-any" tabindex="-1"><code>null</code> == <code>any</code> <a class="header-anchor" href="#null-any" aria-label="Permalink to &quot;`null` == `any`&quot;">​</a></h4><h5 id="true-when-any-is-null-or-undefined" tabindex="-1">true when <code>any</code> is <code>null</code> or <code>undefined</code> <a class="header-anchor" href="#true-when-any-is-null-or-undefined" aria-label="Permalink to &quot;true when `any` is `null` or `undefined`&quot;">​</a></h5><h5 id="false-otherwise" tabindex="-1">false otherwise <a class="header-anchor" href="#false-otherwise" aria-label="Permalink to &quot;false otherwise&quot;">​</a></h5><h4 id="undefined-any" tabindex="-1"><code>undefined</code> == <code>any</code> <a class="header-anchor" href="#undefined-any" aria-label="Permalink to &quot;`undefined` == `any`&quot;">​</a></h4><h5 id="true-when-any-is-null-or-undefined-1" tabindex="-1">true when <code>any</code> is <code>null</code> or <code>undefined</code> <a class="header-anchor" href="#true-when-any-is-null-or-undefined-1" aria-label="Permalink to &quot;true when `any` is `null` or `undefined`&quot;">​</a></h5><h5 id="false-otherwise-1" tabindex="-1">false otherwise <a class="header-anchor" href="#false-otherwise-1" aria-label="Permalink to &quot;false otherwise&quot;">​</a></h5><h4 id="primitive-non-primitive" tabindex="-1">Primitive == Non-primitive <a class="header-anchor" href="#primitive-non-primitive" aria-label="Permalink to &quot;Primitive == Non-primitive&quot;">​</a></h4><h5 id="non-primitive-converted-to-primitive-before-comparison-2" tabindex="-1">Non-primitive converted to primitive before comparison <sup><a href="#toPrimitive">2</a></sup> <a class="header-anchor" href="#non-primitive-converted-to-primitive-before-comparison-2" aria-label="Permalink to &quot;Non-primitive converted to primitive before comparison &lt;sup&gt;[2](#toPrimitive)&lt;/sup&gt;&quot;">​</a></h5>',32)]))}const b=a(i,[["render",r]]);export{m as __pageData,b as default};
