import{_ as i,c as a,o as e,am as l}from"./chunks/framework.Czu1npcN.js";const F=JSON.parse('{"title":"如何在 web 应用中使用 GDAL （一）","description":"","frontmatter":{"createDate":"2025/08/04","title":"如何在 web 应用中使用 GDAL （一）"},"headers":[],"relativePath":"技术的小记/如何在 web 应用中使用 GDAL （一）/index.md","filePath":"技术的小记/如何在 web 应用中使用 GDAL （一）/index.md","lastUpdated":1754755292000}'),t={name:"技术的小记/如何在 web 应用中使用 GDAL （一）/index.md"};function n(h,s,p,k,d,r){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="如何在-web-应用中使用-gdal-一" tabindex="-1">如何在 web 应用中使用 GDAL （一） <a class="header-anchor" href="#如何在-web-应用中使用-gdal-一" aria-label="Permalink to &quot;如何在 web 应用中使用 GDAL （一）&quot;">​</a></h1><p><strong>2025/08/04</strong></p><blockquote><p>开胃菜</p></blockquote><h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p>有过 GIS 相关开发工作的朋友都知道，GDAL 是 GIS 图形处理最强大的工具，对于 native 客户端和服务端的开发者来说非常友好，提供了适用于多种 CPU 和操作系统的可执行文件和 lib 文件，只要开发者使用的不是小众平台，都能轻松方便地获取。但对于 GDAL 来讲， Web 就是一个小众平台，并没有提供这个平台的任何支持。所以一般地， WebGIS 软件都会将 GDAL 相关服务部署到服务端，客户端通过 HTTP 请求的方式调用。这个方案有一些不足：</p><ol><li><p>通过网络请求调用增加了应用的响应时间，无法实现实时应用</p></li><li><p>浪费客户端的算力，增加了服务端成本</p></li></ol><p>所以 WebGIS 用到 GDAL 相关的功能时，总是给用户缓慢、卡顿的感觉。</p><p>使用 emscripten + WebAssembly 让 GDAL 应用与 web 应用成为可能：GDAL 是一个 C/C++ 项目，emscripten 是一个用于 WebAssembly 的 C/C++ 编译工具，或许能够使用 emscripten 将 GDAL 编译成 JavaScript 可以调用的形式，从而将这个工具移植到 WebGIS 应用中。</p><p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pigs5v4hldjieax8dlbo.png" alt="移植路径"></p><h1 id="使用-emscripten" tabindex="-1">使用 emscripten <a class="header-anchor" href="#使用-emscripten" aria-label="Permalink to &quot;使用 emscripten&quot;">​</a></h1><p>对于习惯于编写 JavaScript 的前端开发者来说，如何开始使用 emscripten 就是一个不小的问题。和大多数开源项目一样，emscripten 也是从源码编译开始。这里不大篇幅赘述安装过程，详细请查看 <a href="https://emscripten.org/docs/getting_started/downloads.html#installation-instructions-using-the-emsdk-recommended" target="_blank" rel="noreferrer">emsdk 文档</a>。如果安装总是不成功，或者懒得安装，也可以使用 emsdk 的 <a href="https://hub.docker.com/r/emscripten/emsdk" target="_blank" rel="noreferrer">Docker 镜像</a>。</p><p>安装好并验证成功之后，就可以开始尝试使用 emscripten 进行编译了。这里举一个简单的例子：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// hello_world.c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello, world!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用 <code>emcc</code> 命令编译这份代码：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./emcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello_world.c</span></span></code></pre></div><p>稍等片刻就会获得两个文件：</p><p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t43q1f8xkl8wh97ssady.png" alt="Image description"></p><p><code>a.out.wasm</code> 便是 WebAssembly 文件，包含了编译结果，<code>a.out.js</code> 是提供给 JavaScript 加载和调用 WebAssembly 代码的胶水代码文件。使用 <code>node.js</code> 执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.out.js</span></span></code></pre></div><p>控制台中会打出 “hello, world!”。</p><p>仔细观察就会发现，其实 emsdk 的使用和 gcc 差不多，编译 C 文件时，<strong>使用 <code>emcc</code> 代替 <code>gcc</code> 便可</strong>，编译 C++ 时，使用 <code>em++</code> 命令。同时，和 cmake 类似，emsdk 也提供了 <code>emmake</code>、 <code>emconfigure</code> 等编译指令。除了专门的配置参数以外，其余参数都是通用的。这种设计大大降低了使用难度。</p><h1 id="编译-gdal" tabindex="-1">编译 GDAL <a class="header-anchor" href="#编译-gdal" aria-label="Permalink to &quot;编译 GDAL&quot;">​</a></h1><p>GDAL 当前版本（3.9）使用 CMake 编译，最小依赖如下：</p><ul><li>CMake &gt;= 3.16</li><li>C99 compiler</li><li>C++17 compiler</li><li>PROJ &gt;= 6.3.1</li></ul><p>按照编译文档，我们将命令 <code>cmake ..</code> 替换成 <code>emcmake cmake ..</code> ，执行后就会发现，编译直接报错，并不像按照上一节讲的那么简单，把编译指令换一下就能编译成功。这是什么原因呢？问题出在 GDAL 编译的依赖上。将一个项目编译成 WebAssembly ，除了需要编译当前项目以外，还<strong>需确保其依赖库（如 GDAL 依赖库 PROJ、GEOS 等）均通过 emscripten 编译</strong>，而不能使用本地已经安装好的版本，或者使用 CMake 编译的版本。使用 emscripten 编译的 lib 文件并不会存放在系统默认位置，在 CMake 指令中，如果依赖没有安装在默认位置，可以使用 <code>-D&lt;lib&gt;_INCLUDE_DIR=&lt;value&gt;</code> 和 <code>-D&lt;lib&gt;_LIBRARY=&lt;value&gt;</code> 指定，所以正确的编译姿势应该是：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./emcmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  -DSQLite3_INCLUDE_DIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -DSQLite3_LIBRARY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/lib/libsqlite3.a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -DPROJ_INCLUDE_DIR=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/include</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DPROJ_LIBRARY_RELEASE=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/lib/libproj.a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -DTIFF_INCLUDE_DIR=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/include</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DTIFF_LIBRARY_RELEASE=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/lib/libtiff.a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -DGEOTIFF_INCLUDE_DIR=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/include</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DGEOTIFF_LIBRARY_RELEASE=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/lib/libgeotiff.a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -DZLIB_INCLUDE_DIR=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/include</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DZLIB_LIBRARY_RELEASE=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/lib/libz.a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -DSPATIALITE_INCLUDE_DIR=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/include</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DSPATIALITE_LIBRARY=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/lib/libspatialite.a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -DGEOS_INCLUDE_DIR=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/include</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DGEOS_LIBRARY=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/lib/libgeos.a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -DWEBP_INCLUDE_DIR=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/include</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DWEBP_LIBRARY=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/lib/libwebp.a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -DEXPAT_INCLUDE_DIR=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/include</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DEXPAT_LIBRARY=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/lib/libexpat.a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -DIconv_INCLUDE_DIR=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/include</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -DIconv_LIBRARY=$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EM_OUT_DIR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)/lib/libiconv.a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>在此之前，还需要先用 emscripten 把所有依赖库 <code>include</code> 文件和 <code>.a</code> 文件编译出来。看起来并没有想象中那么简单，对吗？</p><p>github 上有一个 gdal3.js 的项目提供了完整的<a href="https://github.com/bugra9/gdal3.js/blob/master/Makefile" target="_blank" rel="noreferrer">编译脚本</a>，使用了类似栈的堆叠方式，按照依赖的顺序下载并编译了所有源码，我们看 GDAL 和 PROJ 的编译指令（81 行和 201 行），这两个库都有大量的依赖，都使用了 <code>-D&lt;arg&gt;=&lt;value&gt;</code> 参数指定依赖路径。</p><p>在这个 Makefile 目录下执行 make ，不出意外的话，一大段时间之后就可以成功结束编译，获得三个文件：</p><p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51e1q6wwgnou6gxhaqrm.png" alt="gdal 编译结果"></p><h1 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h1><p>本篇介绍了 emscripten 的基本使用和 GDAL 的编译，初步获得了 WebAssembly 文件和胶水代码。<strong>但这只是一个起点</strong>，真正的问题没有解决：</p><ol><li>如何使用 WebAssembly 文件</li><li>编译结果太大，三个编译成果加起来有 ~38MB ，如何优化编译</li><li>如何工程化</li></ol><p>将会在后面的几篇文章中娓娓道来。</p>`,34)]))}const o=i(t,[["render",n]]);export{F as __pageData,o as default};
