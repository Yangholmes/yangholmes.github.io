import{_ as n,C as t,c as r,o as E,a8 as a,b as l,w as s,a as d,G as p,a9 as B}from"./chunks/framework.Cc4yYURl.js";const m=JSON.parse('{"title":"JavaScript 隐式转换","description":"","frontmatter":{"createDate":"2025/08/13","title":"JavaScript 隐式转换"},"headers":[],"relativePath":"技术的小记/JavaScript 隐式转换/index.md","filePath":"技术的小记/JavaScript 隐式转换/index.md","lastUpdated":1755527047000}'),A={name:"技术的小记/JavaScript 隐式转换/index.md"};function o(u,e,h,c,D,_){const i=t("Mermaid");return E(),r("div",null,[e[1]||(e[1]=a(`<h1 id="javascript-隐式转换" tabindex="-1">JavaScript 隐式转换 <a class="header-anchor" href="#javascript-隐式转换" aria-label="Permalink to &quot;JavaScript 隐式转换&quot;">​</a></h1><p><strong>2025/08/13</strong></p><h2 id="令人头疼的问题" tabindex="-1">令人头疼的问题 <a class="header-anchor" href="#令人头疼的问题" aria-label="Permalink to &quot;令人头疼的问题&quot;">​</a></h2><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里输出 true 你敢信？</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 然而这里会输出 false ，why???</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>JavaScript 变量有下面这些特点：</p><ol><li>弱类型，且随时可以变换</li><li>访问时会被相应类型的对象包裹，很难直接访问原始量</li><li>除了几个特殊的类型外，所有变量看上去都是对象</li><li>不同的类型可以放在一起计算，也可以放在一起比较</li></ol><p>在对变量进行计算和比较的时候，代码执行器会自动将参与运算的变量转换成合适的值，这种转换不需要手动声明类型，完全由代码执行器在“桌子底下”操作，完全不透明，所以我们称其为变量的 <strong>隐式转换</strong>。</p><h2 id="隐式转换" tabindex="-1">隐式转换 <a class="header-anchor" href="#隐式转换" aria-label="Permalink to &quot;隐式转换&quot;">​</a></h2>`,8)),(E(),l(B,null,{default:s(()=>[p(i,{id:"mermaid-41",class:"mermaid",graph:"graph%20LR%0A%20%20root%5B%22%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%22%5D%20--%3E%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%0A%20%20root%20--%3E%20%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%0A%0A%20%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%20--%3E%20%E5%8A%A0%E6%B3%95%0A%20%20%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%20--%3E%20%E5%85%B6%E4%BB%96%E8%BF%90%E7%AE%97%5B%E5%87%8F%E6%B3%95%E3%80%81%E4%B9%98%E6%B3%95%E3%80%81%E9%99%A4%E6%B3%95%5D%0A%0A%20%20%E5%8A%A0%E6%B3%95%20--%3E%20string_add%5Bstring%20%2B%20any%5D%0A%20%20string_add%20--%3E%20string_add_rule%5B%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%3Cbr%3E%E9%9D%9Estring%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%88%90string%5D%0A%0A%20%20%E5%8A%A0%E6%B3%95%20--%3E%20number_prim%5Bnumber%20%2B%20%E9%9D%9Estring%E5%8E%9F%E5%A7%8B%E9%87%8F%5D%0A%20%20number_prim%20--%3E%20number_prim_rule%5B%E9%9D%9Enumber%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%88%90number%5D%0A%0A%20%20%E5%8A%A0%E6%B3%95%20--%3E%20number_nonprim%5Bnumber%20%2B%20%E9%9D%9E%E5%8E%9F%E5%A7%8B%E9%87%8F%5D%0A%20%20number_nonprim%20--%3E%20number_nonprim_rule%5B%E4%B8%A4%E8%BE%B9%E9%83%BD%E8%BD%AC%E6%8D%A2%E6%88%90string%E7%B1%BB%E5%9E%8B%5D%0A%0A%20%20%E5%85%B6%E4%BB%96%E8%BF%90%E7%AE%97%20--%3E%20other_ops_rule%5B%E7%AC%A6%E5%8F%B7%E4%B8%A4%E8%BE%B9%E9%9D%9Enumber%E8%BD%AC%E6%8D%A2%E6%88%90number%5D%0A%0A%20%20%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%20--%3E%20%E5%8D%95%E7%8B%AC%E6%9D%A1%E4%BB%B6%0A%20%20%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%20--%3E%20%E9%9D%9E%E4%B8%A5%E6%A0%BC%E6%AF%94%E8%BE%83%0A%0A%20%20%E5%8D%95%E7%8B%AC%E6%9D%A1%E4%BB%B6%20--%3E%20falsy%5Bfalsy%E5%80%BC%5D%0A%20%20falsy%20--%3E%20falsy_items%5Bnull%2C%20undefined%2C%20''%2C%20NaN%2C%20%C2%B10%2C%200n%2C%20false%3Csup%3E%3Ca%20href%3D%22%23falsy%22%3E1%3C%2Fa%3E%3C%2Fsup%3E%5D%0A%0A%20%20%E5%8D%95%E7%8B%AC%E6%9D%A1%E4%BB%B6%20--%3E%20truthy%5B%E5%85%B6%E4%BB%96%E5%80%BC%5D%0A%20%20truthy%20--%3E%20truthy_rule%5Btrue%5D%0A%0A%20%20%E9%9D%9E%E4%B8%A5%E6%A0%BC%E6%AF%94%E8%BE%83%20--%3E%20nan_eq%5BNaN%20%3D%3D%20any%5D%0A%20%20nan_eq%20--%3E%20nan_eq_rule%5Bfalse%5D%0A%0A%20%20%E9%9D%9E%E4%B8%A5%E6%A0%BC%E6%AF%94%E8%BE%83%20--%3E%20bool_eq%5Bboolean%20%3D%3D%20else%5D%0A%20%20bool_eq%20--%3E%20bool_eq_rule%5Bboolean%E8%BD%AC%E6%8D%A2%E6%88%90number%5D%0A%0A%20%20%E9%9D%9E%E4%B8%A5%E6%A0%BC%E6%AF%94%E8%BE%83%20--%3E%20str_num_eq%5Bstring%20%3D%3D%20number%5D%0A%20%20str_num_eq%20--%3E%20str_num_eq_rule%5Bstring%E8%BD%AC%E6%8D%A2%E6%88%90number%5D%0A%0A%20%20%E9%9D%9E%E4%B8%A5%E6%A0%BC%E6%AF%94%E8%BE%83%20--%3E%20null_eq%5Bnull%20%3D%3D%20any%5D%0A%20%20null_eq%20--%3E%20null_eq_true%5Bany%E6%98%AFnull%2Fundefined%3A%20true%5D%0A%20%20null_eq%20--%3E%20null_eq_false%5Bany%E6%98%AF%E5%85%B6%E4%BB%96%3A%20false%5D%0A%0A%20%20%E9%9D%9E%E4%B8%A5%E6%A0%BC%E6%AF%94%E8%BE%83%20--%3E%20undef_eq%5Bundefined%20%3D%3D%20any%5D%0A%20%20undef_eq%20--%3E%20undef_eq_true%5Bany%E6%98%AFnull%2Fundefined%3A%20true%5D%0A%20%20undef_eq%20--%3E%20undef_eq_false%5Bany%E6%98%AF%E5%85%B6%E4%BB%96%3A%20false%5D%0A%0A%20%20%E9%9D%9E%E4%B8%A5%E6%A0%BC%E6%AF%94%E8%BE%83%20--%3E%20prim_nonprim%5B%E5%8E%9F%E5%A7%8B%E9%87%8F%20%3D%3D%20%E9%9D%9E%E5%8E%9F%E5%A7%8B%E9%87%8F%5D%0A%20%20prim_nonprim%20--%3E%20prim_nonprim_rule%5B%E9%9D%9E%E5%8E%9F%E5%A7%8B%E9%87%8F%E8%BD%AC%E6%8D%A2%E6%88%90%E5%8E%9F%E5%A7%8B%E9%87%8F%3Csup%3E%3Ca%20href%3D%22%23toPrimitive%22%3E2%3C%2Fa%3E%3C%2Fsup%3E%5D%0A%0A%20%20classDef%20default%20fill%3Afont-size%3A1rem%2Cline-height%3A2%3B%0A%0A"})]),fallback:s(()=>e[0]||(e[0]=[d(" Loading... ",-1)])),_:1})),e[2]||(e[2]=a('<blockquote><p>[<span id="falsy">1</span>] <code>document.all</code> 也是 falsy ，详见<a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy" target="_blank" rel="noreferrer">文档</a>。</p><p>[<span id="toPrimitive">2</span>] 非原始量 转 原始量 的方法也是一种 “<strong>隐式转换</strong>” 。首先会调用 <code>valueOf()</code> 函数，将返回值作为 原始量 ；如果函数没有返回值或返回值非原始量，则调用 <code>toString()</code> 函数。如果没有 <code>valueOf()</code> 或 <code>toString()</code> 函数，则会报错。</p></blockquote><h1 id="小试牛刀" tabindex="-1">小试牛刀 <a class="header-anchor" href="#小试牛刀" aria-label="Permalink to &quot;小试牛刀&quot;">​</a></h1><p>分析一下开头那个逻辑对比：</p><div class="language-JavaScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>是 原始量 和 非原始量 对比，先将 非原始量 转换成 原始量 ：</p><p><code>[undefined]</code> =&gt; <code>[undefined].toString()</code> =&gt; <code>&#39;&#39;</code></p><p>变成了</p><p><code>[undefined] == false</code> =&gt; <code>&#39;&#39; == false</code></p><p><code>string</code> 和 <code>boolean</code> 对比，将两边转换成 <code>number</code>：</p><p><code>&#39;&#39; == false</code> =&gt; <code>0 == 0</code></p><p>最终就是 <code>0 == 0</code> ，答案为 <code>true</code> 。</p><p>而 <code>[undefined] === false</code> 对比就比较简单了，<code>===</code> 是严格相等符号，符号两边必须类型和值完全一致才输出 <code>true</code> ，否则都是 <code>false</code> 。</p>',12))])}const C=n(A,[["render",o]]);export{m as __pageData,C as default};
