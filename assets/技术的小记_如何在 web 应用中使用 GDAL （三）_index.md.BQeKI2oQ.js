import{_ as e,c as s,o as i,a8 as l}from"./chunks/framework.Cc4yYURl.js";const b=JSON.parse('{"title":"如何在 web 应用中使用 GDAL （三）","description":"","frontmatter":{"createDate":"2025/08/18"},"headers":[],"relativePath":"技术的小记/如何在 web 应用中使用 GDAL （三）/index.md","filePath":"技术的小记/如何在 web 应用中使用 GDAL （三）/index.md","lastUpdated":1755530114000}'),n={name:"技术的小记/如何在 web 应用中使用 GDAL （三）/index.md"};function t(p,a,d,r,o,c){return i(),s("div",null,a[0]||(a[0]=[l(`<h1 id="如何在-web-应用中使用-gdal-三" tabindex="-1">如何在 web 应用中使用 GDAL （三） <a class="header-anchor" href="#如何在-web-应用中使用-gdal-三" aria-label="Permalink to &quot;如何在 web 应用中使用 GDAL （三）&quot;">​</a></h1><p><strong>2025/08/18</strong></p><nav class="table-of-contents"><ul><li><a href="#优化的必要性">优化的必要性</a></li><li><a href="#如何优化">如何优化</a><ul><li><a href="#代码分离">代码分离</a></li><li><a href="#按需编译">按需编译</a></li><li><a href="#调试信息">调试信息</a></li><li><a href="#运行环境设置">运行环境设置</a></li><li><a href="#文件系统">文件系统</a></li><li><a href="#其他">其他</a></li></ul></li><li><a href="#实战">实战</a><ul><li><a href="#gdal3-js-编译脚本纠错">gdal3.js 编译脚本纠错</a></li><li><a href="#gdal3-js-编译脚本优化">gdal3.js 编译脚本优化</a></li><li><a href="#结果">结果</a></li></ul></li><li><a href="#结语">结语</a></li></ul></nav><p>这篇研究优化。</p><h2 id="优化的必要性" tabindex="-1">优化的必要性 <a class="header-anchor" href="#优化的必要性" aria-label="Permalink to &quot;优化的必要性&quot;">​</a></h2><p>上上篇介绍了一个完整的<a href="https://github.com/bugra9/gdal3.js/blob/master/Makefile" target="_blank" rel="noreferrer">编译脚本</a>，运行这个脚本可以顺利编译出 GDAL WebAssembly 版本的产物。</p><p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pq5z0b1xx6lz5ahztul.png" alt="GDAL 编译产物"></p><p>但是这个编译结果并不适合在生产环境中使用，原因有：</p><ol><li>文件太大，核心 wasm 文件 27MB ，胶水代码 272KB ，data 文件 11 MB</li><li>胶水代码大量冗余，包含 Node 环境、bash 环境的代码，且无法进行 tree shaking</li><li>生产环境无需输出调试信息</li></ol><p>其中文件过大是最致命的，构建产物全部加起来超过 38MB ，任何 web 应用都无法接受这么一个硕大文件依赖的模块。</p><p>另外，这个 Makefile 包含许多错误配置，由于 emsdk 在编译时会抛弃不支持的编译配置，这些错误并没有中断编译。本篇还将尝试解读 gdal3.js 作者的意图，修正错误的编译参数。</p><blockquote><p>先叠甲</p><p>通过编译过程优化，GDAL 3.x 版本的 WebAssembly 编译产物可以缩小，但很难做到足够小。本篇介绍的操作对于编译 GDAL 2.x 和 OpenCV 4.x 非常有效。个中原因，需要了解 GDAL 的源码和编译机制才能分晓，已超出本系列范围，先按下不表。</p><p>TODO: 添加 OpenCV 的优化对比</p></blockquote><h2 id="如何优化" tabindex="-1">如何优化 <a class="header-anchor" href="#如何优化" aria-label="Permalink to &quot;如何优化&quot;">​</a></h2><p>对于 web 应用来说，资源越小越好。经典的 web 开发流程中，开发者使用现代化的前端构建工具和模块化设计，通过注入懒加载、Tree-Shaking 等方法把原本可能比较大的 JavaScript 文件缩小成比较小的文件，并且可以做到按需要加载；JavaScript 以外的文件，使用各种“加载器”转换成 JavaScript 代码的样子，也可以实现构建和优化。但这些手段在 WebAssembly 面前都不起作用了：</p><ol><li>加载器的原理是将非 *.js 文件转换成 JavaScript 模块，例如将 *.png 文件转换为 base64 字符串或 url 字符串并导出为模块；转换的过程中可以缩小文件，依赖于这种文件的压缩算法，压缩后的文件必须保证在不增加代码的前提下能够在客户端中使用； *.wasm 文件可以压缩，但是目前还无法做到客户端中不增加代码就能使用</li><li>JavaScript Tree-Shaking 是基于字符串代码抽象语法树去除死代码，*.wasm 是已经编译好的可执行文件，是二进制代码不是字符串，无法像 JavaScript 一样瘦身</li></ol><blockquote><p>能不能做一个 <code>*.wasm</code> 文件的 loader 呢？有的，其实是有的，比如说 <a href="https://vite.dev/guide/features.html#webassembly" target="_blank" rel="noreferrer">vite</a> 就可以使用 <code>?init</code> 直接加载 WebAssembly 模块并初始化，省去写拉取初始化等代码的过程，但是这个写法并不适合结合胶水代码。</p></blockquote><p>既然如此，我们应该着眼于 wasm 编译阶段的优化。</p><h3 id="代码分离" tabindex="-1">代码分离 <a class="header-anchor" href="#代码分离" aria-label="Permalink to &quot;代码分离&quot;">​</a></h3><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WASM</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>有三个选项</p><ul><li>0 - 生成 asm.js ，wasm 代码和 js 代码合二为一</li><li>1 - wasm 代码和 js 代码分开输出</li><li>2 - 同时生成 asm.js 和 wasm + js</li></ul><h3 id="按需编译" tabindex="-1">按需编译 <a class="header-anchor" href="#按需编译" aria-label="Permalink to &quot;按需编译&quot;">​</a></h3><blockquote><p>“用多少编多少”</p></blockquote><h4 id="_1-库函数" tabindex="-1">1. 库函数 <a class="header-anchor" href="#_1-库函数" aria-label="Permalink to &quot;1. 库函数&quot;">​</a></h4><p>通常在项目中，我们只会用到算法库中占整个库很小比例的若干几个功能，没有必要编译无用的功能；编译 C/C++ 项目时，编译器通常会自动消除死代码，可以通过以下两个参数控制：</p><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EXPORTED_FUNCTIONS  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 导出函数列表</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EXPORT_ALL  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 导出所有函数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>注意，导出函数前面需要添加一个下划线 <code>_</code> ，例如需要导出 <code>add</code> 函数，可以这样编写</p><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-sEXPORTED_FUNCTIONS=&quot;[&#39;_add&#39;]&quot;&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-emscripten-运行时函数" tabindex="-1">2. emscripten 运行时函数 <a class="header-anchor" href="#_2-emscripten-运行时函数" aria-label="Permalink to &quot;2. emscripten 运行时函数&quot;">​</a></h4><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EXPORTED_RUNTIME_METHODS</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>emscripten 运行时函数，默认值是空数组。我们应该按照实际需要添加导出函数，比如需要使用虚拟文件系统时，添加 <code>FS</code> 到数组中</p><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-sEXPORTED_RUNTIME_METHODS=&quot;[&#39;FS&#39;]&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在 <a href="https://github.com/bugra9/gdal3.js/blob/master/Makefile" target="_blank" rel="noreferrer">gdal3.js</a> 项目中，导出函数列表将几乎所有支持的 GDAL 功能都列进去了，这是编译产物巨大化的关键原因。</p><h3 id="调试信息" tabindex="-1">调试信息 <a class="header-anchor" href="#调试信息" aria-label="Permalink to &quot;调试信息&quot;">​</a></h3><p>emcc 编译参数和 gcc 的大致相同，可以选择关闭生产环境中的调试信息来优化产物。和调试信息相关的配置有</p><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-gsource-map</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-source-map-base</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-O&lt;level&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-g&lt;level&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_1-gsource-map-和-source-map-base" tabindex="-1">1. <code>-gsource-map</code> 和 <code>-source-map-base</code> <a class="header-anchor" href="#_1-gsource-map-和-source-map-base" aria-label="Permalink to &quot;1. \`-gsource-map\` 和 \`-source-map-base\`&quot;">​</a></h4><p><code>-gsource-map</code> 控制是否输出 sourcemap ，如果设置了输出 sourcemap ，调试器将会在 <code>&lt;base-url&gt;</code> + <code>&lt;wasm-file-name&gt;</code> + <code>.map</code> 位置加载 .map 文件，<code>&lt;base-url&gt;</code> 由参数 <code>-source-map-base</code> 设置，默认为空，也就是和 wasm 文件同一个路径。</p><h4 id="_2-o-level" tabindex="-1">2. <code>-O&lt;level&gt;</code> <a class="header-anchor" href="#_2-o-level" aria-label="Permalink to &quot;2. \`-O&lt;level&gt;\`&quot;">​</a></h4><p>设置优化等级。</p><ul><li><code>-O0</code> - 完全不优化，保留所有调试信息</li><li><code>-O1</code> - 基础优化，消除运行时断言</li><li><code>-O2</code> - <code>-O1</code> 基础上进一步优化，消除死代码</li><li><code>-O3</code> - <code>-O2</code> 基础上再优化</li><li><code>-Og</code> - 和 <code>-O1</code> 差不多，比 <code>-O1</code> 保留更多调试信息</li><li><code>-Os</code> - 和 <code>-O3</code> 差不多，比 <code>-O3</code> 输出文件更小</li><li><code>-Oz</code> - 和 <code>-Os</code> 差不多，比 <code>-Os</code> 输出文件更小</li></ul><p>默认值是 <code>-O0</code> ，保留所有调试信息。</p><h4 id="_3-g-level" tabindex="-1">3. <code>-g&lt;level&gt;</code> <a class="header-anchor" href="#_3-g-level" aria-label="Permalink to &quot;3. \`-g&lt;level&gt;\`&quot;">​</a></h4><p>调试等级，一共有四个等级</p><ul><li><code>-g0</code> - 不输出任何调试信息</li><li><code>-g1</code> - 链接时，保留 JavaScript 中的空格</li><li><code>-g2</code> - 链接时，保留编译代码中的函数名称</li><li><code>-g3</code> - 编译为目标文件时，保留调试信息，包括 JS 空格、函数名称和 LLVM 调试信息（DWARF）（如果有的话）</li></ul><p>如果设置为 <code>-g</code> 不带有任何数字，相当于 <code>-g3</code> 。</p><h3 id="运行环境设置" tabindex="-1">运行环境设置 <a class="header-anchor" href="#运行环境设置" aria-label="Permalink to &quot;运行环境设置&quot;">​</a></h3><p>默认情况下，emscripten 认为胶水代码会在不同的环境中执行，自动生成各种环境的嗅探代码和初始化代码。实际上，对于一个确定的应用而言，运行环境是固定的，没有必要产出环境嗅探。运行环境的参数是</p><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ENVIRONMENT</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>emscripten 支持的值有：</p><ul><li>node - Node.js</li><li>web - 网页</li><li>webview - 也是网页，特指插入 native 应用的网页，等同于 web</li><li>worker - worker 环境</li><li>shell - 命令行中</li></ul><p>如果是 web 应用，只需要编译 <code>-sENVIRONMENT=worker</code> 环境即可；同理，在 Node.js 环境中只需要编译 <code>-sENVIRONMENT=node</code> 。</p><p>还有一个与运行环境相关的配置项是</p><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EXPORT_ES6</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将这个配置设置为 <code>1</code> ，便可以把胶水代码输出为符合 esmodule 规范的模块。默认情况下，胶水代码输出包含环境嗅探的 CommonJS 模块和 IIFE ，在现代前端项目中无法使用 <code>import</code> 导入。</p><h3 id="文件系统" tabindex="-1">文件系统 <a class="header-anchor" href="#文件系统" aria-label="Permalink to &quot;文件系统&quot;">​</a></h3><p>某些算法库，如 GDAL ，需要依赖操作系统的文件系统读写文件和输出输出，emscripten 实现了一套基于 JavaScript 的内存文件系统。如果项目中没有使用文件系统，可以不使用，配置文件系统的参数是</p><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FILESYSTEM</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>编译文件系统，如果代码引用了 stdio.h 和 fprintf ，会自动开启，如果代码是纯计算，可以手动关闭。</p><blockquote><p>emscripten 的文件系统随 Module 导出，可以通过 <code>Module.FS</code> 访问</p></blockquote><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><h4 id="_1-polyfill" tabindex="-1">1. polyfill <a class="header-anchor" href="#_1-polyfill" aria-label="Permalink to &quot;1. polyfill&quot;">​</a></h4><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">POLYFILL</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>是否添加 polyfill 支持旧版浏览器，默认值是 <code>true</code> 。一般需要支持旧版浏览器的项目，都会在统一的地方添加 polyfill ，无需 emscripten 再添加，建议关闭 polyfill 。</p><h4 id="_2-使用-bom-的-math-库" tabindex="-1">2. 使用 BOM 的 Math 库 <a class="header-anchor" href="#_2-使用-bom-的-math-库" aria-label="Permalink to &quot;2. 使用 BOM 的 Math 库&quot;">​</a></h4><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JS_MATH</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以配置这个参数为 <code>true</code> 使用 JavaScript Math 库，这样就可以避免编译 libc 。如果使用 JavaScript Math 库，计算的结果可能和 libc math 库精度不一致。建议在对精度不是很敏感的项目中可以开启。</p><h4 id="_3-最小化输出" tabindex="-1">3. 最小化输出 <a class="header-anchor" href="#_3-最小化输出" aria-label="Permalink to &quot;3. 最小化输出&quot;">​</a></h4><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MINIMAL_RUNTIME</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>最小化输出，不带 POSIX 功能，不带 Module ，也不带 emscripten 内置的 XHR 等模块。尽管可以获得非常小的产物，但是可能代码无法运行，不建议使用。</p><h2 id="实战" tabindex="-1">实战 <a class="header-anchor" href="#实战" aria-label="Permalink to &quot;实战&quot;">​</a></h2><h3 id="gdal3-js-编译脚本纠错" tabindex="-1">gdal3.js 编译脚本纠错 <a class="header-anchor" href="#gdal3-js-编译脚本纠错" aria-label="Permalink to &quot;gdal3.js 编译脚本纠错&quot;">​</a></h3><h4 id="_1-调试等级错误" tabindex="-1">1. 调试等级错误 <a class="header-anchor" href="#_1-调试等级错误" aria-label="Permalink to &quot;1. 调试等级错误&quot;">​</a></h4><p>FLAGS 文件<a href="https://github.com/bugra9/gdal3.js/blob/v2.8.1/GDAL_EMCC_FLAGS.mk#L4" target="_blank" rel="noreferrer">第 4 行</a> 定义调试等级，emcc 支持参数 0~3 ，并不支持 <code>-g4</code>。</p><p>这里明显可以看出来，当 <code>type</code> 参数为 <code>debug</code> 时，编译输出完整的调试信息。所以这里应该使用</p><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GDAL_EMCC_FLAGS += -O0 -g3\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-sourcemap-设置错误" tabindex="-1">2. sourcemap 设置错误 <a class="header-anchor" href="#_2-sourcemap-设置错误" aria-label="Permalink to &quot;2. sourcemap 设置错误&quot;">​</a></h4><p>还是在同一行，配置了 <code>--source-map-base</code> ，但并未开启 <code>-gsource-map</code> 。这里同样是当 <code>type</code> 参数为 <code>debug</code> 时，需要编译完整的 sourcemap 方便跟踪调试， <code>--source-map-base</code> 建议从参数中读取，所以这里应该使用</p><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GDAL_EMCC_FLAGS += -gsource-map=1 --source-map-base </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BASE_URL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="gdal3-js-编译脚本优化" tabindex="-1">gdal3.js 编译脚本优化 <a class="header-anchor" href="#gdal3-js-编译脚本优化" aria-label="Permalink to &quot;gdal3.js 编译脚本优化&quot;">​</a></h3><h4 id="_1-关闭所有调试信息" tabindex="-1">1. 关闭所有调试信息 <a class="header-anchor" href="#_1-关闭所有调试信息" aria-label="Permalink to &quot;1. 关闭所有调试信息&quot;">​</a></h4><p>FLAGS 文件<a href="https://github.com/bugra9/gdal3.js/blob/v2.8.1/GDAL_EMCC_FLAGS.mk#L6" target="_blank" rel="noreferrer">第 6 行</a> 增加关闭调试的配置</p><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GDAL_EMCC_FLAGS += -Oz -g0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-指定运行环境" tabindex="-1">2. 指定运行环境 <a class="header-anchor" href="#_2-指定运行环境" aria-label="Permalink to &quot;2. 指定运行环境&quot;">​</a></h4><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GDAL_EMCC_FLAGS += -s ENVIRONMENT=worker -s EXPORT_ES6=1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_3-减少导出函数" tabindex="-1">3. 减少导出函数 <a class="header-anchor" href="#_3-减少导出函数" aria-label="Permalink to &quot;3. 减少导出函数&quot;">​</a></h4><p>例如上一篇，我们在代码中值用到了 <code>GDALOpen</code> 、 <code>GDALInfo</code> 和 <code>GDALClose</code> ，那么我们就只导出这三个函数：</p><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GDAL_EMCC_FLAGS += -s EXPORTED_FUNCTIONS=&quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &#39;_malloc&#39;,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &#39;_free&#39;,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &#39;_CSLCount&#39;,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &#39;_GDALOpen&#39;,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &#39;_GDALClose&#39;,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &#39;_GDALInfo&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>emscripten 提供的运行时函数也不需要太多，只导出用得上的：</p><div class="language-makefile vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GDAL_EMCC_FLAGS += -s EXPORTED_RUNTIME_METHODS=&quot;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &#39;ccall&#39;,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &#39;cwrap&#39;,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &#39;FS&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="结果" tabindex="-1">结果 <a class="header-anchor" href="#结果" aria-label="Permalink to &quot;结果&quot;">​</a></h3><p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42xw0fgo2xmmjwkfn4ke.png" alt="优化结果"></p><p>wasm 文件减小了 6177075Bytes ，瘦身了 22.44% ； js 文件减小了 18299Bytes ，瘦身 10.21% 。</p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>后面的篇章我们将会讨论：</p><ol><li>emscripten 的虚拟文件系统</li><li>*.data 是什么，有什么用，如何优化 *.data</li></ol>`,97)]))}const u=e(n,[["render",t]]);export{b as __pageData,u as default};
