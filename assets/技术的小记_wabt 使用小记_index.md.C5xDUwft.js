import{_ as i,c as a,o as n,a9 as l}from"./chunks/framework.GQWhFI7o.js";const g=JSON.parse('{"title":"wabt 使用小记","description":"","frontmatter":{"createDate":"2025/09/04","tags":["WebAssembly","wabt"]},"headers":[],"relativePath":"技术的小记/wabt 使用小记/index.md","filePath":"技术的小记/wabt 使用小记/index.md","lastUpdated":1757932028000}'),p={name:"技术的小记/wabt 使用小记/index.md"};function h(k,s,e,t,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="wabt-使用小记" tabindex="-1">wabt 使用小记 <a class="header-anchor" href="#wabt-使用小记" aria-label="Permalink to &quot;wabt 使用小记&quot;">​</a></h1><p>2025年09月04日</p><nav class="table-of-contents"><ul><li><a href="#编译-wat-代码">编译 wat 代码</a></li><li><a href="#分析-wasm">分析 wasm</a></li><li><a href="#整理代码">整理代码</a></li><li><a href="#反汇编">反汇编</a></li></ul></nav><p><a href="https://github.com/WebAssembly/wabt" target="_blank" rel="noreferrer">wabt</a> 是 WebAssembly 二进制格式工具集，提供 wasm 相关的代码编译、分析、调试和验证等功能。这篇简单介绍一下常用命令的用法。</p><h2 id="编译-wat-代码" tabindex="-1">编译 wat 代码 <a class="header-anchor" href="#编译-wat-代码" aria-label="Permalink to &quot;编译 wat 代码&quot;">​</a></h2><p>用 wat 实现斐波那契数列：</p><div class="language-wasm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">wasm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;; fib.wat</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;env&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;log&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ;; 申请一页内存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">memory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;memory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ;; 全局变量：堆指针（指向下一个可用内存地址）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $heap_ptr (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mut</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ;; 分配内存块</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ;; params：size (i32) - 需要分配的字节数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ;; return：起始地址 (i32)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $allocate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $size </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">result</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $start </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $start (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $heap_ptr))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $heap_ptr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.add</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $heap_ptr)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $size)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $start)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ;; 斐波那契数列</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ;; params：n (i32) - 数组长度</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ;; return：数组起始地址 (i32)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $n </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">result</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $arr_ptr </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $prev </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $curr </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $next </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    ;; 分配内存：n * sizeof(i32) = n * 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $arr_ptr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">call</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $allocate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.mul</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $n)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    ;; 边界情况处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.le_s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $n) (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $arr_ptr)))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;; 返回空数组地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    ;; 初始化前两个元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $arr_ptr) (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.gt_s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $n) (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.store</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $arr_ptr) (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    ;; 迭代计算后续元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $prev (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $curr (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $loop</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      ;; 计算下一个斐波那契数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $next (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $prev) (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $curr)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $prev (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $curr))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $curr (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $next))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      ;; 存储到内存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.store</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.add</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $arr_ptr)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.mul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i) (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $next)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      ;; 循环控制</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i) (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">br_if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $loop (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.lt_s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i) (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $n)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    ;; 返回数组起始地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $arr_ptr)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br></div></div><p>使用 wabt 编译代码：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wat2wasm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./fib.wat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./fib.wasm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>得到 wasm 文件：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fib.wasm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fib.wat</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>main.ts 提供了宿主调用 wasm 代码：</p><div class="language-TypeScript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fibUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./fib.wasm?url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WebAssembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instantiateStreaming</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fibUrl), {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  env: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 解构导出对象，获得 fib 函数 和 内存</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">memory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.instance.exports </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    memory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebAssembly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Memory</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 斐波那契数列长度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 计算，结果保存在内存中，获得保存结果的指针</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> addr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 读取结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Uint32Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(memory.buffer, addr, n);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>使用 vite 作为构建工具，vite 支持将任何类型资源作为 url 导入，这里将 wasm 转化成资源地址，使用 <code>WebAssembly.instantiateStreaming</code> 和 <code>fetch</code> 加载。实际上 vite 也支持使用 <code>?init</code> 后缀加载并自动初始化 wasm 文件，详细可以查阅 vite 文档。</p><p>这里尝试使用 <code>fib</code> 函数去计算长度为 10 的斐波那契数列，输出结果为：</p><p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ouxn7vsvxz4nvjq7pexx.png" alt="Image description" loading="lazy"></p><p>符合预期。</p><p>看一下 wat 代码和 wasm 文件的大小对比：</p><p><img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqygcvuhh6mcb7xeli6d.png" alt="Image description" loading="lazy"></p><p>可以看出，经过编译后，wasm 文件比源码小了一个数量级。如此高效除了 wasm 格式紧凑以外， LEB128 压缩也贡献不少。</p><h2 id="分析-wasm" tabindex="-1">分析 wasm <a class="header-anchor" href="#分析-wasm" aria-label="Permalink to &quot;分析 wasm&quot;">​</a></h2><p><code>wasm-objdump</code> 命令跟操作系统 <code>objdump</code> 类似，用来分析 wasm 文件信息。有什么用？这里举一个例子：开发者拿到一个 wasm 模块，想要快速知道导出函数都有哪些，每个函数的入参数量和类型，返回值长度和类型，就可以使用 <code>wasm-objdump</code> 工具分析。以上一节 fib.wasm 文件为例：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wasm-objdump</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./fib.wasm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>输出信息</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib.wasm:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> format</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Section</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Details:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Export[2]:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> memory[0]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;memory&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> func[2]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fib&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>说明 fib.wasm 有两个导出项，一个是内存，另一个是 <code>fib</code> 函数，函数类型是 2 ，接下来再导出函数签名</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wasm-objdump</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./fib.wasm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Function</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>得到：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib.wasm:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> format</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Section</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Details:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Function[2]:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> func[1]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sig=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> func[2]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sig=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>函数 2 的类型在 <code>Type</code> 段声明，且使用索引为 1 的类型，导出 <code>Type</code> 段：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wasm-objdump</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./fib.wasm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Type</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>Type</code> 信息为：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib.wasm:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> format</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Section</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Details:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type[2]:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type[0]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i32) -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nil</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type[1]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i32) -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i32</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>最终获取到了 fib.wasm 导出内容的全部信息：</p><ol><li>导出内存</li><li>导出函数 <code>fib</code> ，<code>fib</code> 有一个 <code>i32</code> 类型的入参，有一个 <code>i32</code> 类型的返回值</li></ol><p><code>wasm-objdump -x</code> 参数可以单独直接使用，会输出 wasm 文件所有块信息，信息量小的文件可以直接全部输出，信息量大的文件建议分块输出，方便分析。</p><h2 id="整理代码" tabindex="-1">整理代码 <a class="header-anchor" href="#整理代码" aria-label="Permalink to &quot;整理代码&quot;">​</a></h2><p><code>wat-desugar</code> 命令可以用来整理现有的 wat 代码，以符合某些规范。比如上文的 fib.wat 源码没有严格按照 <code>操作数压栈 -&gt; 执行指令</code> 的流程编写，经常将操作数写在指令后面，尽管是合法的写法，但不符合栈式虚拟机的范式。使用 <code>wat-desugar</code> 可以帮助我们规范这份代码。这里展示 <code>$allocate</code> 函数整理后的代码：</p><div class="language-wasm vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">wasm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $allocate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $size </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">result</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $start </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $heap_ptr</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $start</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $heap_ptr</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $size</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.add</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $heap_ptr</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $start</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>结合上文源码可以看出来整理后的代码紧凑，更加符合栈式调用的范式，但是更不易读了。最明显的区别就是数学运算 <code>i32.add</code> <code>i32.mul</code> ，源码将操作数放在了指令的后面，而规范写法应该是先压栈再调用加法指令。</p><blockquote><p>“desugar” 这个名称和 “Syntactic Sugar （语法糖）” 这个词语是相对的，形如 <code>(i32.add (local.get 0) (local.get 1))</code> 这样的写法是一种语法糖，指令调用之前操作数并没有先压栈（有点像寄存器虚拟机），编译器接受这种不符合栈式虚拟机的语法，但这种写法仿佛更容易让人理解。“desugar” 类似广东人说的“<strong>走糖</strong>”，将语法糖代码的糖分去掉，使用语法最原汁原味的代码，老老实实先压栈再计算。</p></blockquote><h2 id="反汇编" tabindex="-1">反汇编 <a class="header-anchor" href="#反汇编" aria-label="Permalink to &quot;反汇编&quot;">​</a></h2><p>wabt 工具有 3 个反汇编命令：</p><ul><li><code>wasm2wat</code> 将 wasm 反汇编成 wat 代码</li><li><code>wasm2c</code> 将 wasm 反汇编成 C 源码和头文件</li><li><code>wasm-decompile</code> 将 wasm 反汇编成容易阅读的 C 风格伪代码</li></ul><p>笔者在开发过程中 <code>wasm-decompile</code> 配合 <code>wasm2wat</code> 使用比较多。 <code>wasm-decompile</code> 用来分析功能的实现，如果需要对模块小修小改，使用 <code>wasm2wat</code> 获得 wat 文件，修改后再用编译命令将 wat 编译成新的 wasm 即可。</p>`,45)]))}const y=i(p,[["render",h]]);export{g as __pageData,y as default};
