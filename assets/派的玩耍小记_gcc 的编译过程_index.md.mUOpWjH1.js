import{_ as i,c as a,o as n,a8 as h}from"./chunks/framework.Cc4yYURl.js";const l="/assets/gcc-compile-diagram.DMtKQ0iJ.png",p="/assets/c-program-execute-diagram.UgUuZuup.png",E=JSON.parse('{"title":"gcc 的编译过程","description":"","frontmatter":{"createDate":"2019/10/27","title":"gcc 的编译过程"},"headers":[],"relativePath":"派的玩耍小记/gcc 的编译过程/index.md","filePath":"派的玩耍小记/gcc 的编译过程/index.md","lastUpdated":1755530114000}'),t={name:"派的玩耍小记/gcc 的编译过程/index.md"};function k(e,s,r,d,F,g){return n(),a("div",null,s[0]||(s[0]=[h(`<h3 id="gcc-的使用" tabindex="-1">gcc 的使用 <a class="header-anchor" href="#gcc-的使用" aria-label="Permalink to &quot;gcc 的使用&quot;">​</a></h3><p><strong>2019-10-27</strong></p><p>gcc 是最棒的 C 程序编译器（之一）。gcc 编译器会将源代码编译链接成 Linux 可以执行的二进制文件。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ gcc hello.c</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果代码没有错误，会返回到控制台，没有任何提示；如果代码有风险或者错误，则会在控制台中输出。编译链接完成后，将在同一个目录下生成一个输出文件 a.out ，可以使用 <code>ls</code> 指令查看文件验证编译链接是否成功。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a.out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.c</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="如何执行程序" tabindex="-1">如何执行程序 <a class="header-anchor" href="#如何执行程序" aria-label="Permalink to &quot;如何执行程序&quot;">​</a></h4><p>如果不指定名称，gcc 默认输出的可执行文件名为 a.out 。在大多数的 Linux 系统中，都是通过一个名为 PATH 的环境变量来管理系统可执行文件路径的。但通常当前路径（ ./ ）是没有包含在系统 PATH 路径中的，所以需要按照下面的方式执行：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./a.out</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在执行文件的时候要注意用户在当前目录是否具有执行权限，如果没有执行权限，是不能运行程序的。</p><h4 id="gcc-编译过程" tabindex="-1">gcc 编译过程 <a class="header-anchor" href="#gcc-编译过程" aria-label="Permalink to &quot;gcc 编译过程&quot;">​</a></h4><p>一般地，编译系统把一份源代码翻译成目标程序的过程会分为 5 个阶段，分别是 <strong>词法分析</strong>、<strong>语法分析</strong>、<strong>中间代码生成</strong>、<strong>代码优化</strong>、<strong>目标代码生成</strong>。</p><ol><li>词法分析</li></ol><p>词法分析的目的是处理源代码中的单词。分析程序时按照从左到右顺序依次扫描源代码，生成单词对应的符号，把字符描述的程序转换成符号描述的中间程序。词法分析程序也被称作此法扫描器，这个过程可以用手工构造，手工构造使用状态图，一般地我们会选择机器构造，机器构造使用的是状态机。</p><ol start="2"><li>语法分析</li></ol><p>语法分析的功能是分许单词符号是否符合语法要求，例如表达式、复制、循环等。此外，语法分析按照语法规则分析检查程序的语句是否符合合理正确的逻辑结构。</p><p>语法分析方法有自上而下和自下而上两种方法，自上而下从代码开始的第一个符号开始向下推导，逐步分析；自下而上利用堆栈，把代码按顺序压入栈中，然后再分析是否符合语法。</p><ol start="3"><li>中间代码生成</li></ol><p>中间代码又称作中间语言，是一种介于源代码和目标代码之间的表达方式。使用中间程序既可以完整地表达源代码的含义，又可以使编译程序在逻辑结构上更加简单明确。中间语言是供编译器使用的，常见的表示形式有逆波兰记号、四元式、三元式和树等。</p><p>4.代码优化</p><p>代码优化的目的是生成有效的目标代码。代码优化通过对中间代码的分析，进行等价变换，达到减小存储空间和缩短运行时间的目的。程序优化并不改变原有的程序功能，只是对代码结构进行调整。代码优化还可以对目标代码进行优化，与中间代码优化相比，对目标代码优化依赖于计算机的类型，一般来说，优化效果更好。</p><blockquote><p>gcc 可以对代码优化程度进行配置，设置优化级别。使用参数 <code>-O &lt;优化级别&gt;</code> 指定。</p></blockquote><ol start="5"><li>目标代码生成</li></ol><p>编译程序的最后一项任务是生成目标代码。目标代码生成器将中间代码转换成目标代码，通常有 3 中变换形式：</p><ul><li><p>可以立即执行的机器代码。这种方式对应静态链接方式，程序中所有的地址都重定位，执行效率最高，缺点是占用存储空间最大。</p></li><li><p>带装配的机器语言模块。这种方式不链接系统共享的库，在需要的时候会由系统加载共享的库文件。</p></li><li><p>汇编语言代码。该方式经过汇编程序汇编后，直接生成可以在操作系统上运行的目标代码。</p></li></ul><p>源代码经过编译之后，还需要链接才能在 Linux 系统下运行。链接的作用是<strong>把代码中调用的系统函数和对应的系统库建立关系，设置程序启动时候的内存、环境变量等，设置程序退出的状态、释放占用资源等操作</strong>。gcc 在链接用户目标文件时，会根据用户代码使用不用的函数链接对应的动态库或者静态库（默认是动态库），同时还会对所有的目标文件链接固定的预编译的系统目标文件，这几个预编译的目标文件用来完成程序初始化、结束时的环境设置等。</p><p>一次完整的 C 程序编译链接过程图示：</p><p><img src="`+l+`" alt="gcc 编译流程"></p><h4 id="探索程序的执行" tabindex="-1">探索程序的执行 <a class="header-anchor" href="#探索程序的执行" aria-label="Permalink to &quot;探索程序的执行&quot;">​</a></h4><p>这里我们用 strace 工具研究程序的执行流程。strace 是 Linux 系统应用程序的调试工具，通常用于监控和调试进程和 Linux 内核之间的交互。Debian 系操作系统可以通过 apt 工具安装 strace ，命令是 <code>apt-get install strace</code> 。</p><p>我们来研究一下 hello.c 这个程序，这段代码直接输出“ hello world! ”和换行到控制台：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * hello.c</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>执行编译链接指令后，我们得到 a.out 文件，接着输入如下指令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> strace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./a.out</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>输入回车后，打印出程序使用系统调用的结果：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execve(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;./a.out&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./a.out&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], 0x7ffff4068ae0 /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 19 vars </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/) = 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brk(NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                               = 0x7fffc0975000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">access(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;/etc/ld.so.nohwcap&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> F_OK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)      = -1 ENOENT (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">No</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> such</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> directory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">access(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;/etc/ld.so.preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> R_OK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)      = -1 ENOENT (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">No</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> such</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> directory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openat(AT_FDCWD,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/etc/ld.so.cache&quot;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> O_RDONLY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">O_CLOEXEC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fstat(3,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {st_mode=S_IFREG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0644,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> st_size=25468,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mmap(NULL,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 25468,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PROT_READ,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MAP_PRIVATE,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 0x7f1ebc642000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close(3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                                = 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">access(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;/etc/ld.so.nohwcap&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> F_OK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)      = -1 ENOENT (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">No</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> such</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> directory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openat(AT_FDCWD,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/lib/x86_64-linux-gnu/libc.so.6&quot;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> O_RDONLY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">O_CLOEXEC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0&gt;\\0\\1\\0\\0\\0\\260\\34\\2\\0\\0\\0\\0\\0&quot;...,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 832</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 832</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fstat(3,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {st_mode=S_IFREG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0755,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> st_size=2030544,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mmap(NULL,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8192,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PROT_READ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PROT_WRITE,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MAP_PRIVATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MAP_ANONYMOUS,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 0x7f1ebc640000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mmap(NULL,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4131552,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PROT_READ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PROT_EXEC,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MAP_PRIVATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MAP_DENYWRITE,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 0x7f1ebc000000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mprotect(0x7f1ebc1e7000,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2097152,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PROT_NONE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mmap(0x7f1ebc3e7000,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 24576,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PROT_READ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PROT_WRITE,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MAP_PRIVATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MAP_FIXED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MAP_DENYWRITE,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x1e7000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 0x7f1ebc3e7000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mmap(0x7f1ebc3ed000,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 15072,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PROT_READ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PROT_WRITE,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MAP_PRIVATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MAP_FIXED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MAP_ANONYMOUS,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 0x7f1ebc3ed000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close(3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                                = 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arch_prctl(ARCH_SET_FS,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x7f1ebc6414c0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mprotect(0x7f1ebc3e7000,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 16384,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PROT_READ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mprotect(0x7f1ebca00000,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4096,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PROT_READ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mprotect(0x7f1ebc627000,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4096,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PROT_READ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">munmap(0x7f1ebc642000,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25468</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)           = 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fstat(1,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {st_mode=S_IFCHR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0660,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> st_rdev=makedev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ioctl(1,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TCGETS,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {B38400</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> opost</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> isig</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> icanon</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) = 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brk(NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                               = 0x7fffc0975000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brk(0x7fffc0996000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                     = 0x7fffc0996000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write(1,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello world!\\n&quot;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 13hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)          = 13</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit_group(0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)                           = </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">+++</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exited</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> with</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +++</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>分析一下关键步骤：</p><ol><li>line 1 ，使用 <code>exec*()</code> 调用可执行文件。exec* 函数是一系列系统调用，包括 6 种函数：</li></ol><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> envp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execvp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ..., </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> envp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ...);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execlp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ...);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>看起来比较复杂，但实际上只有 <code>execve()</code> 函数是真正的系统调用，其他的函数都是从 <code>execve()</code> 函数演化而来的。<code>execve()</code> 函数是一个系统调用，作用是执行指定的可执行文件，用可执行文件的内容取代调用 <code>execve()</code> 函数进程的内容。简单地讲，新的可执行文件覆盖了当前正在运行的程序，最终的结果就是创建了新的进程。</p><blockquote><p><code>execve()</code> 函数既可以执行二进制文件，也可以执行合法的 Linux 脚本。</p></blockquote><ol start="2"><li><p>line 2 ，使用 <code>brk()</code> 函数设置当前进程的数据段。<code>brk()</code> 函数很重要，也是一个系统调用，为存放程序内容创建了内存区域。</p></li><li><p>line 7 等，打开共享库文件，并使用 <code>mmap()</code> 函数映射共享库文件到内存。</p></li><li><p>line 28 ，调用 <code>write()</code> 函数输出字符串到屏幕。<code>write()</code> 函数是共享库中的一个函数，也是一个系统调用，源代码中的 <code>printf()</code> 函数经过编译之后最终调用的就是 <code>write()</code> 函数。</p></li></ol><p>hello world! 程序的执行流程：</p><p><img src="`+p+`" alt="c 程序执行流程"></p><h4 id="库的使用" tabindex="-1">库的使用 <a class="header-anchor" href="#库的使用" aria-label="Permalink to &quot;库的使用&quot;">​</a></h4><p>Linux 系统中有两种程序库，分别是<strong>静态库（static library）<strong>和</strong>动态库（shared library）</strong>。</p><p>静态库是在程序链接的时候，把库函数的目标代码和程序链接在一起。而使用更加广泛的是动态库，从字面上来看，翻译成“共享库”可能更加恰当，但从功能上来看，“动态库”更能体现这类库文件的特点。动态库的工作原理是，相同功能的代码可以被多个程序共用，在程序加载的时候，内核会检查程序使用的动态库是否已经加载到内存，如果还未加载，贼从系统库路径搜索并加载相应的动态库；如果动态库已经加载到内存，那么程序可以直接使用而无需加载。</p><p>从动态库的执行方式来看，动态库是仅会被系统加载一次的，这样意味着对应的应用程序会更小。拿 hello.c 这个程序对静态库和动态库的使用做一个对比。</p><p>首先使用静态方式编译：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -static</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.c</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查看 a.out 的文件大小：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.out</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-rwxrwxrwx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yangholmes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yangholmes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 825K</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Oct</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 31</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10:55</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.out</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>接下来看看动态链接方式，这也是 gcc 的默认链接方式：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.c</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查看 a.out 的文件大小：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.out</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-rwxrwxrwx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yangholmes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yangholmes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8.2K</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Oct</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 31</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10:57</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.out</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>可以看到，动态链接和静态链接得到的文件大小相差了 100 倍！</p><h4 id="编译动态库文件" tabindex="-1">编译动态库文件 <a class="header-anchor" href="#编译动态库文件" aria-label="Permalink to &quot;编译动态库文件&quot;">​</a></h4><p>gcc 可以把源文件编译成动态库文件，我们可以把项目里使用频繁的代码汇集成动态库文件，以供其他源码调用。使用 gcc 的 <code>-shared</code> 选项，编译动态库文件的命令为：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fPIC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.o</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.o</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -shared</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libtest.so</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>或者一步到位：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.c</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fPIC</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -shared</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libtest.so</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中，参数 <code>-fPIC</code> 作用于编译阶段，告诉编译器产生与位置无关代码（Position-Independent Code）。位置独立的代码即位置无关代码，在可执行程序加载的时候可以存放在内存内的任何位置。若不使用该选项则编译后的代码是位置相关的代码，在可执行程序加载时是通过代码拷贝的方式来满足不同的进程的需要，没有实现真正意义上的位置共享。这样一来，产生的代码中就没有绝对地址了，全部使用相对地址，所以代码可以被加载器加载到内存的任意位置，都可以正确的执行。这正是共享库所要求的，共享库被加载时，在内存的位置不是固定的。</p><h4 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h4><ul><li>《ARM 嵌入式 Linux 系统开发详解》</li></ul>`,65)]))}const y=i(t,[["render",k]]);export{E as __pageData,y as default};
