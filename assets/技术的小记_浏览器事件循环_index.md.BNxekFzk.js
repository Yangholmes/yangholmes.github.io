import{_ as e,c as a,o as l,a8 as r}from"./chunks/framework.Cc4yYURl.js";const i="/assets/%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.C02YojEo.png",p=JSON.parse('{"title":"浏览器事件循环","description":"","frontmatter":{"createDate":"2023/05/22"},"headers":[],"relativePath":"技术的小记/浏览器事件循环/index.md","filePath":"技术的小记/浏览器事件循环/index.md","lastUpdated":1756407495000}'),n={name:"技术的小记/浏览器事件循环/index.md"};function o(d,t,s,c,h,x){return l(),a("div",null,t[0]||(t[0]=[r('<h1 id="浏览器事件循环" tabindex="-1">浏览器事件循环 <a class="header-anchor" href="#浏览器事件循环" aria-label="Permalink to &quot;浏览器事件循环&quot;">​</a></h1><p>2023年05月22日</p><p>浏览器事件循环模型和 Node.js 不太一样，Node.js 事件循环使用 libuv 实现，是复杂的多阶段任务队列， I/O 密集型；浏览器比 Node.js 多一个渲染任务，但阶段少，队列比较单一。每个浏览器有不同的解决方案（ Chromium 的 Blink ，Firefox 的 Gecko ），符合 HTML5 规范即可。</p><h2 id="执行流程" tabindex="-1">执行流程 <a class="header-anchor" href="#执行流程" aria-label="Permalink to &quot;执行流程&quot;">​</a></h2><p>基本执行流程：</p><p><img src="'+i+'" alt="执行流程"></p><h2 id="设计原理与动机" tabindex="-1">设计原理与动机 <a class="header-anchor" href="#设计原理与动机" aria-label="Permalink to &quot;设计原理与动机&quot;">​</a></h2><p>为什么要设计成事件循环模式？浏览器 JavaScript 环境本质上是单线程的，这意味着它一次只能执行一个任务。事件循环机制是为了解决单线程环境下如何处理大量异步操作而设计的。任务类型有轻重缓急，浏览器将事件分成两种优先级，高优先级的称为<strong>微任务</strong>，低优先级的称为<strong>宏任务</strong>。这么设计有几个好处：</p><ol><li>任务可以按照不同的优先级处理</li><li>既避免空转，又避免渲染阻塞</li><li>任务批处理，减少重排和重绘</li><li>任务调度灵活，执行顺序可预测</li></ol><h3 id="常见的微任务" tabindex="-1">常见的<strong>微任务</strong> <a class="header-anchor" href="#常见的微任务" aria-label="Permalink to &quot;常见的**微任务**&quot;">​</a></h3><ul><li>Promise 回调</li><li>MutationObserver</li><li>Object.Observer</li></ul><h3 id="常见的宏任务" tabindex="-1">常见的<strong>宏任务</strong> <a class="header-anchor" href="#常见的宏任务" aria-label="Permalink to &quot;常见的**宏任务**&quot;">​</a></h3><ul><li>setTimeout / setInterval</li><li>UI rendering</li><li>I/O</li><li>&lt;script&gt;</li><li>用户事件</li></ul><h2 id="一些疑惑" tabindex="-1">一些疑惑 <a class="header-anchor" href="#一些疑惑" aria-label="Permalink to &quot;一些疑惑&quot;">​</a></h2><h3 id="http-request-属于那种任务" tabindex="-1">HTTP request 属于那种任务？ <a class="header-anchor" href="#http-request-属于那种任务" aria-label="Permalink to &quot;HTTP request 属于那种任务？&quot;">​</a></h3><p>网络请求属于浏览器 I/O ，有专门的线程处理，属于宏任务。但是 <code>fetch</code> 返回是一个 <code>Promise</code> ，却是一个微任务。在 <code>fetch</code> 以前，网络请求使用 <code>XMLHttpRequest</code> 实现，这是一个实实在在的宏任务。</p><table tabindex="0"><thead><tr><th style="text-align:center;">任务类型 ​​</th><th style="text-align:center;">​​ 示例</th><th style="text-align:center;">​​ 队列归属 ​​</th><th style="text-align:center;">​​ 执行时机 ​​</th></tr></thead><tbody><tr><td style="text-align:center;">HTTP 请求发起</td><td style="text-align:center;"><code>fetch()</code></td><td style="text-align:center;">宏任务</td><td style="text-align:center;">由浏览器网络线程处理</td></tr><tr><td style="text-align:center;">Promise 回调</td><td style="text-align:center;"><code>.then()</code> / <code>.catch()</code></td><td style="text-align:center;">微任务</td><td style="text-align:center;">当前宏任务结束后立即执行</td></tr><tr><td style="text-align:center;">传统 HTTP 回调</td><td style="text-align:center;"><code>xhr.onload</code></td><td style="text-align:center;">宏任务</td><td style="text-align:center;">下一轮事件循环</td></tr></tbody></table>',17)]))}const g=e(n,[["render",o]]);export{p as __pageData,g as default};
